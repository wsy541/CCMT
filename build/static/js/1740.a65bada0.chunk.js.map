{"version":3,"file":"static/js/1740.a65bada0.chunk.js","mappings":"gQAKMA,EAAqB,SAAAC,GAAK,YAAK,CACnCC,gBAAiBD,EAAME,KACvBC,YAAaH,EAAMI,mBAAqB,EACxCC,cAAeL,EAAME,KACrBI,UAAWN,EAAMI,qBAAsB,UAAAJ,EAAMO,YAAN,eAAYC,SAAU,GAAK,IAGvDC,EAAQ,mCAAG,WAAMC,GAAN,+EAClBC,EAAU,GADQ,SAIpBA,EAAUD,EAAME,WAChBC,QAAQC,IAAIH,GALQ,uDAOpBI,EAAAA,OAAAA,gBAA8BL,EAAO,WAAY,IAP7B,8BAWjBC,EAAQK,OAXS,wBAYpBD,EAAAA,OAAAA,gBAA8BL,EAAO,WAAY,IAZ7B,kCAgBhBO,GAAQC,EAAAA,EAAAA,aAAYP,GACpBQ,EAAc,IAAIC,EAAAA,kBAAkBH,GACpCI,EAAS,IAAIC,EAAAA,GAAsBH,GACzCF,EAAMM,uBACNF,EAAOE,uBACDC,EAAS,GAEfP,EAAMQ,iBAAiB,CACrBC,YADqB,SACTC,EAAIC,EAAI1B,EAAME,EAAoByB,EAAKC,GACjDN,EAAOO,KAAK,CACVC,QAASH,EACTI,SAAUlB,EAAAA,eAAAA,MACVmB,OAAQ,YACRjC,gBAAiBC,EACjBC,YAAaC,EAAqB,EAClCC,cAAeH,EACfI,UAAWF,EAAqB,EAChC+B,KAAM,aAKZd,EAAOI,iBAAiB,CACtBC,YADsB,SACVC,EAAIS,EAAiBC,EAAIC,EAAIT,EAAKC,GACxCM,GACFZ,EAAOO,MAAP,QACEC,QAASH,EACTI,SAAUlB,EAAAA,eAAAA,MACVmB,OAAQ,YACRC,KAAM,UACHpC,EAAmBqC,QAM9Bf,EAAOkB,MApDe,kBAqDff,GArDe,yDAAH,uD,sBCZrB,SAASgB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,O","sources":["pages/events/add/validate.ts","../javascript/esm|/Users/alexandra/Downloads/arco-design-pro-main/my-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { CommonTokenStream } from 'antlr4ts';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { createLexer } from './common';\nimport { TodoLangGrammarParser } from '@/ANTLR/TodoLangGrammarParser';\n\nconst getPositionByToken = token => ({\n  startLineNumber: token.line,\n  startColumn: token.charPositionInLine + 1,\n  endLineNumber: token.line,\n  endColumn: token.charPositionInLine + (token.text?.length || 0) + 1\n});\n\nexport const validate = async model => {\n  let content = '';\n\n  try {\n    content = model.getValue();\n    console.log(content);\n  } catch {\n    monaco.editor.setModelMarkers(model, 'ruleLint', []);\n    return;\n  }\n\n  if (!content.trim()) {\n    monaco.editor.setModelMarkers(model, 'ruleLint', []);\n    return;\n  }\n\n  const lexer = createLexer(content);\n  const tokenStream = new CommonTokenStream(lexer);\n  const parser = new TodoLangGrammarParser(tokenStream);\n  lexer.removeErrorListeners();\n  parser.removeErrorListeners();\n  const errors = []; // 收集词法错误和语法错误\n\n  lexer.addErrorListener({\n    syntaxError(_1, _2, line, charPositionInLine, msg, _6) {\n      errors.push({\n        message: msg,\n        severity: monaco.MarkerSeverity.Error,\n        source: 'validator',\n        startLineNumber: line,\n        startColumn: charPositionInLine + 1,\n        endLineNumber: line,\n        endColumn: charPositionInLine + 2,\n        code: 'lexer'\n      });\n    }\n\n  });\n  parser.addErrorListener({\n    syntaxError(_1, offendingSymbol, _3, _4, msg, _6) {\n      if (offendingSymbol) {\n        errors.push({\n          message: msg,\n          severity: monaco.MarkerSeverity.Error,\n          source: 'validator',\n          code: 'parser',\n          ...getPositionByToken(offendingSymbol)\n        });\n      }\n    }\n\n  });\n  parser.tsl();\n  return errors;\n};","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["getPositionByToken","token","startLineNumber","line","startColumn","charPositionInLine","endLineNumber","endColumn","text","length","validate","model","content","getValue","console","log","monaco","trim","lexer","createLexer","tokenStream","CommonTokenStream","parser","TodoLangGrammarParser","removeErrorListeners","errors","addErrorListener","syntaxError","_1","_2","msg","_6","push","message","severity","source","code","offendingSymbol","_3","_4","tsl","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}