{"version":3,"file":"static/js/5031.723328c3.chunk.js","mappings":"+PAIaA,EAAb,WAIE,WAAYC,GAAK,IAAD,4BAHhBC,YAAc,GAGE,KAFhBC,SAAWC,OAAOC,OAAO,MAGvBC,KAAKC,WAAaN,EAElB,IAAMO,EAAa,SAAAC,GAAU,IAAD,IAO1B,KAJA,UAAAA,EAAMC,iBAAN,oBAAAD,MAAK,UAELA,EAAME,qBAFD,aAEL,OAAAF,OAEgB,EAAKF,WAArB,CAIA,IAAMK,GAAsBC,EAAAA,EAAAA,UAAS,EAAKC,WAAY,KACtD,EAAKX,SAASM,EAAMM,IAAIC,YAAcP,EAAMQ,oBAAmB,WAC7DL,EAAoBH,MAEtB,EAAKK,WAAWL,KAGZS,EAAiB,SAAAT,GACrBU,EAAAA,OAAAA,gBAA8BV,EAAO,WAAY,IACjD,IAAMW,EAASX,EAAMM,IAAIC,WACnBb,EAAW,EAAKA,SAASiB,GAE3BjB,IACFA,EAASkB,iBACF,EAAKlB,SAASiB,KAIzBd,KAAKJ,YAAYoB,KAAKH,EAAAA,OAAAA,iBAA+BX,IACrDF,KAAKJ,YAAYoB,KAAKH,EAAAA,OAAAA,mBAAiCD,IACvDZ,KAAKJ,YAAYoB,KAAKH,EAAAA,OAAAA,0BAAuC,SAAAI,GAC3DL,EAAeK,EAAMd,OACrBD,EAAWe,EAAMd,WAEnBH,KAAKJ,YAAYoB,KAAK,CACpBD,QAAS,WACP,IAAK,IAAMG,KAAO,EAAKrB,SACrB,EAAKA,SAASqB,GAAKH,aAIzBF,EAAAA,OAAAA,YAA0BM,QAAQjB,GAjDtC,sCAoDE,WACEF,KAAKJ,YAAYuB,SAAQ,SAAAC,GAAI,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAML,aACvCf,KAAKJ,YAAc,KAtDvB,2DAyDE,WAAiBO,GAAjB,wFACuBkB,EAAAA,EAAAA,UAASlB,GADhC,QACQmB,EADR,SAIIT,EAAAA,OAAAA,gBAA8BV,EAAO,WAAYmB,GAJrD,2CAzDF,+D,6JCCMC,EAAqB,SAAAC,GAAK,YAAK,CACnCC,gBAAiBD,EAAME,KACvBC,YAAaH,EAAMI,mBAAqB,EACxCC,cAAeL,EAAME,KACrBI,UAAWN,EAAMI,qBAAsB,UAAAJ,EAAMO,YAAN,eAAYC,SAAU,GAAK,IAGvDX,EAAQ,mCAAG,WAAMlB,GAAN,+EAClB8B,EAAU,GADQ,SAIpBA,EAAU9B,EAAM+B,WAChBC,QAAQC,IAAIH,GALQ,uDAOpBpB,EAAAA,OAAAA,gBAA8BV,EAAO,WAAY,IAP7B,8BAWjB8B,EAAQI,OAXS,wBAYpBxB,EAAAA,OAAAA,gBAA8BV,EAAO,WAAY,IAZ7B,kCAgBhBmC,GAAQC,EAAAA,EAAAA,aAAYN,GACpBO,EAAc,IAAIC,EAAAA,kBAAkBH,GACpCI,EAAS,IAAIC,EAAAA,GAAsBH,GACzCF,EAAMM,uBACNF,EAAOE,uBACDtB,EAAS,GAEfgB,EAAMO,iBAAiB,CACrBC,YADqB,SACTC,EAAIC,EAAItB,EAAME,EAAoBqB,EAAKC,GACjD5B,EAAON,KAAK,CACVmC,QAASF,EACTG,SAAUvC,EAAAA,eAAAA,MACVwC,OAAQ,YACR5B,gBAAiBC,EACjBC,YAAaC,EAAqB,EAClCC,cAAeH,EACfI,UAAWF,EAAqB,EAChC0B,KAAM,aAKZZ,EAAOG,iBAAiB,CACtBC,YADsB,SACVC,EAAIQ,EAAiBC,EAAIC,EAAIR,EAAKC,GACxCK,GACFjC,EAAON,MAAP,QACEmC,QAASF,EACTG,SAAUvC,EAAAA,eAAAA,MACVwC,OAAQ,YACRC,KAAM,UACH/B,EAAmBgC,QAM9Bb,EAAOgB,MApDe,kBAqDfpC,GArDe,yDAAH","sources":["pages/events/add/Linter.ts","pages/events/add/validate.ts"],"sourcesContent":["import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { validate } from './validate';\nimport { debounce } from 'lodash'; // 捕获错误类\n\nexport class Linter {\n  disposables = [];\n  listener = Object.create(null);\n\n  constructor(id) {\n    this.languageId = id;\n\n    const onModelAdd = model => {\n      const modelId = // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore ts error\n      model.getModeId?.() || // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore new Api\n      model.getLanguageId?.();\n\n      if (modelId !== this.languageId) {\n        return;\n      }\n\n      const debouncedDoValidate = debounce(this.doValidate, 500);\n      this.listener[model.uri.toString()] = model.onDidChangeContent(() => {\n        debouncedDoValidate(model);\n      });\n      this.doValidate(model);\n    };\n\n    const onModelRemoved = model => {\n      monaco.editor.setModelMarkers(model, 'ruleLint', []);\n      const uriStr = model.uri.toString();\n      const listener = this.listener[uriStr];\n\n      if (listener) {\n        listener.dispose();\n        delete this.listener[uriStr];\n      }\n    };\n\n    this.disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n    this.disposables.push(monaco.editor.onWillDisposeModel(onModelRemoved));\n    this.disposables.push(monaco.editor.onDidChangeModelLanguage(event => {\n      onModelRemoved(event.model);\n      onModelAdd(event.model);\n    }));\n    this.disposables.push({\n      dispose: () => {\n        for (const key in this.listener) {\n          this.listener[key].dispose();\n        }\n      }\n    });\n    monaco.editor.getModels().forEach(onModelAdd);\n  }\n\n  dispose() {\n    this.disposables.forEach(item => item?.dispose());\n    this.disposables = [];\n  }\n\n  async doValidate(model) {\n    const errors = await validate(model);\n\n    if (errors) {\n      monaco.editor.setModelMarkers(model, 'ruleLint', errors);\n    }\n  }\n\n}","import { CommonTokenStream } from 'antlr4ts';\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport { createLexer } from './common';\nimport { TodoLangGrammarParser } from '@/ANTLR/TodoLangGrammarParser';\n\nconst getPositionByToken = token => ({\n  startLineNumber: token.line,\n  startColumn: token.charPositionInLine + 1,\n  endLineNumber: token.line,\n  endColumn: token.charPositionInLine + (token.text?.length || 0) + 1\n});\n\nexport const validate = async model => {\n  let content = '';\n\n  try {\n    content = model.getValue();\n    console.log(content);\n  } catch {\n    monaco.editor.setModelMarkers(model, 'ruleLint', []);\n    return;\n  }\n\n  if (!content.trim()) {\n    monaco.editor.setModelMarkers(model, 'ruleLint', []);\n    return;\n  }\n\n  const lexer = createLexer(content);\n  const tokenStream = new CommonTokenStream(lexer);\n  const parser = new TodoLangGrammarParser(tokenStream);\n  lexer.removeErrorListeners();\n  parser.removeErrorListeners();\n  const errors = []; // 收集词法错误和语法错误\n\n  lexer.addErrorListener({\n    syntaxError(_1, _2, line, charPositionInLine, msg, _6) {\n      errors.push({\n        message: msg,\n        severity: monaco.MarkerSeverity.Error,\n        source: 'validator',\n        startLineNumber: line,\n        startColumn: charPositionInLine + 1,\n        endLineNumber: line,\n        endColumn: charPositionInLine + 2,\n        code: 'lexer'\n      });\n    }\n\n  });\n  parser.addErrorListener({\n    syntaxError(_1, offendingSymbol, _3, _4, msg, _6) {\n      if (offendingSymbol) {\n        errors.push({\n          message: msg,\n          severity: monaco.MarkerSeverity.Error,\n          source: 'validator',\n          code: 'parser',\n          ...getPositionByToken(offendingSymbol)\n        });\n      }\n    }\n\n  });\n  parser.tsl();\n  return errors;\n};"],"names":["Linter","id","disposables","listener","Object","create","this","languageId","onModelAdd","model","getModeId","getLanguageId","debouncedDoValidate","debounce","doValidate","uri","toString","onDidChangeContent","onModelRemoved","monaco","uriStr","dispose","push","event","key","forEach","item","validate","errors","getPositionByToken","token","startLineNumber","line","startColumn","charPositionInLine","endLineNumber","endColumn","text","length","content","getValue","console","log","trim","lexer","createLexer","tokenStream","CommonTokenStream","parser","TodoLangGrammarParser","removeErrorListeners","addErrorListener","syntaxError","_1","_2","msg","_6","message","severity","source","code","offendingSymbol","_3","_4","tsl"],"sourceRoot":""}