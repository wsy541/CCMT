{"version":3,"file":"static/js/4624.15f8860c.chunk.js","mappings":"yPAKEA,EACEC,IAAAA,KAAU,CACZ,WAAY,CAAC,CACXC,GAAI,sBACJC,KAAM,kBAAMF,IAAAA,OAAAA,KAAiB,CAAC,6CAAW,mDAAY,0CACrD,kBAAmB,EACnB,iBAAkB,EAClB,eAAgB,EAChB,mBAAoB,EACpB,aAAc,MAThBD,MA0DFI,EAAAA,EAAAA,GAAU,CACRC,MAAO,WACLJ,IAAAA,KAAU,IAAIK,OAAO,cAAc,SAAAC,GACjC,MAIIC,EAAAA,SAAYD,EAAOE,KAAKC,MAJ5B,IACEC,KAAAA,OADF,MACS,EADT,MAEEC,SAGIC,EAAIF,EACJG,OANN,MAEa,GAFb,EAOMC,EAvDO,WAAgB,IAAfC,EAAc,uDAAP,GAEvBd,EAMEc,EANFd,GACAC,EAKEa,EALFb,KACiBc,EAIfD,EAJF,iBACgBE,EAGdF,EAHF,gBACiBG,EAEfH,EAFF,iBACYI,EACVJ,EADF,YAGF,GAAId,EACF,OAAOF,EAAKqB,QAAO,SAAAC,GAAI,OAAIA,EAAKpB,KAAOA,KAGzC,IAAIa,GAAM,OAAOf,GAgBjB,GAdIG,IACFY,EAASA,EAAOM,QAAO,SAAAC,GACrB,OAAOA,EAAKnB,KAAKoB,cAAcC,SAASrB,EAAKoB,mBAI7CN,IACFF,EAASA,EAAOM,QAAO,SAAAC,GAAI,OAAIL,EAAYO,SAASF,EAAKL,YAAYQ,gBAGnEP,IACFH,EAASA,EAAOM,QAAO,SAAAC,GAAI,OAAIJ,EAAWM,SAASF,EAAKJ,WAAWO,gBAGjEN,GAAsC,IAAvBA,EAAYO,OAAc,CAC3C,cAAqBP,EAArB,GAAOQ,EAAP,KAAcC,EAAd,KACAb,EAASA,EAAOM,QAAO,SAAAC,GACrB,IAAMO,EAAOC,GAAAA,GAAQC,SAAST,EAAKH,YAAa,QAAQa,OAAO,uBAC/D,OAAQF,GAAAA,CAAMD,GAAMI,SAASH,GAAAA,CAAMH,MAAYG,GAAAA,CAAMD,GAAMK,QAAQJ,GAAAA,CAAMF,OAQ7E,OAJIR,GAAUA,EAAOM,SACnBX,EAASA,EAAOM,QAAO,SAAAC,GAAI,OAAIF,EAAOI,SAASF,EAAKF,OAAOK,gBAGtDV,EAaYoB,EAPf,aAQA,MAAO,CACLnC,KAAMe,EAAOqB,OAAOvB,EAAI,GAAKC,EAAID,EAAIC,GACrCuB,MAAOtB,EAAOW","sources":["pages/list/search-table/mock/index.ts"],"sourcesContent":["import Mock from 'mockjs';\nimport qs from 'query-string';\nimport dayjs from 'dayjs';\nimport setupMock from '@/utils/setupMock';\nconst {\n  list\n} = Mock.mock({\n  'list|100': [{\n    id: /[0-9]{8}[-][0-9]{4}/,\n    name: () => Mock.Random.pick(['每日推荐视频集', '抖音短视频候选集', '国际新闻集合']),\n    'contentType|0-2': 0,\n    'filterType|0-1': 0,\n    'count|0-2000': 0,\n    'createdTime|1-60': 0,\n    'status|0-1': 0\n  }]\n});\n\nconst filterData = (rest = {}) => {\n  const {\n    id,\n    name,\n    'contentType[]': contentType,\n    'filterType[]': filterType,\n    'createdTime[]': createdTime,\n    'status[]': status\n  } = rest;\n\n  if (id) {\n    return list.filter(item => item.id === id);\n  }\n\n  let result = [...list];\n\n  if (name) {\n    result = result.filter(item => {\n      return item.name.toLowerCase().includes(name.toLowerCase());\n    });\n  }\n\n  if (contentType) {\n    result = result.filter(item => contentType.includes(item.contentType.toString()));\n  }\n\n  if (filterType) {\n    result = result.filter(item => filterType.includes(item.filterType.toString()));\n  }\n\n  if (createdTime && createdTime.length === 2) {\n    const [begin, end] = createdTime;\n    result = result.filter(item => {\n      const time = dayjs().subtract(item.createdTime, 'days').format('YYYY-MM-DD HH:mm:ss');\n      return !dayjs(time).isBefore(dayjs(begin)) && !dayjs(time).isAfter(dayjs(end));\n    });\n  }\n\n  if (status && status.length) {\n    result = result.filter(item => status.includes(item.status.toString()));\n  }\n\n  return result;\n};\n\nsetupMock({\n  setup: () => {\n    Mock.mock(new RegExp('/api/list'), params => {\n      const {\n        page = 1,\n        pageSize = 10,\n        ...rest\n      } = qs.parseUrl(params.url).query;\n      const p = page;\n      const ps = pageSize;\n      const result = filterData(rest);\n      return {\n        list: result.slice((p - 1) * ps, p * ps),\n        total: result.length\n      };\n    });\n  }\n});"],"names":["list","Mock","id","name","setupMock","setup","RegExp","params","qs","url","query","page","pageSize","p","ps","result","rest","contentType","filterType","createdTime","status","filter","item","toLowerCase","includes","toString","length","begin","end","time","dayjs","subtract","format","isBefore","isAfter","filterData","slice","total"],"sourceRoot":""}