{"version":3,"file":"static/js/187.d9eedfaf.chunk.js","mappings":"2MAIMA,EAAS,CAAC,iCAAS,iCAAS,iCAAS,kCACrCC,EAAQ,CAAC,EAAG,IAAK,IAAM,IAAM,KAC7BC,EAAW,CAAC,qBAAO,qBAAO,uBA+ChCC,EAAAA,EAAAA,GAAU,CACRC,MAAO,WACLC,IAAAA,KAAU,IAAIC,OAAO,kCAAkC,WACrD,IACSC,EACLF,IAAAA,KAAU,CACZ,UAAW,CAAC,WACV,OAAOA,IAAAA,OAAAA,QAAoB,EAAG,SAHhCG,MAMEC,EAAO,GAEX,OADAT,EAAOU,SAAQ,SAACC,EAAMC,GAAP,OAAiBH,EAAOA,EAAKI,OAxD9B,SAACF,EAAMC,GAazB,OAVIP,IAAAA,KAAU,CACZ,UAAW,CAAC,CACV,QAAS,EACTS,KAAM,WACJ,OAAOC,GAAAA,GAAQC,SAASC,KAAKC,GAAI,QAAQC,OAAO,UAElDlB,MAAO,kBAAMI,IAAAA,OAAAA,QAAoBJ,EAAMW,GAAQX,EAAMW,EAAQ,KAC7DD,KAAMA,MARRF,KAWUW,KAAI,SAAAC,GAEd,cADOA,EAAKH,GACLG,KAyC8CC,CAAYX,EAAMC,OAC9D,CACLL,aAAAA,EACAgB,UAAWd,MAGfJ,IAAAA,KAAU,IAAIC,OAAO,kCAAkC,WASrD,OANID,IAAAA,KAAU,CACZ,SAAU,CAAC,CACT,UAAW,CAAC,qBAAO,qBAAO,sBAC1BJ,MAAO,kBAAMI,IAAAA,OAAAA,QAAoB,IAAM,UAJzCI,QASJJ,IAAAA,KAAU,IAAIC,OAAO,+BAA+B,WAWlD,MAAO,CACLG,KAXY,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,gBAW/BW,KAAI,SAAAC,GAAI,eAClBA,KAAAA,GAVqB,WACvB,IAAMG,EAAS,GAIf,OAHAtB,EAASQ,SAAQ,SAAAC,GACfa,EAAOb,GAAQN,IAAAA,OAAAA,QAAoB,EAAG,QAEjCmB,EAMFC,OAELC,OAAQxB,MAGZG,IAAAA,KAAU,IAAIC,OAAO,8BAA8B,SAAAqB,GACjD,IACEC,EACEC,EAAAA,SAAYF,EAAOG,KAAKC,MAD1BH,KAEF,OAAOvB,IAAAA,KAAU,CACfJ,MAAO,kBAAMI,IAAAA,OAAAA,QAAoB,IAAM,MACvC2B,UAAW,kBAAM3B,IAAAA,OAAAA,WACjB4B,KAAM,kBAAM5B,IAAAA,OAAAA,QAAoB,IAAK,MACrC6B,UAAWN,EACXL,UAAW,WACT,OAnFOZ,EAmFS,gBAlFT,IAAIwB,MAAM,IAAIC,KAAK,GAAGhB,KAAI,iBAAO,CAC9CiB,EAAGhC,IAAAA,OAAAA,QAAoB,IAAM,SAEjBiC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,EAAIG,EAAEH,KAAGjB,KAAI,SAACC,EAAMT,GAAP,eAAC,UAAsBS,GAAvB,IAC1CoB,EAAG7B,EACHD,KAAAA,OANa,IAAAA,QAuFbN,IAAAA,KAAU,IAAIC,OAAO,wCAAwC,WAM3D,OALgBJ,EAASkB,KAAI,SAAAT,GAC3B,OA/EiB,SAAAA,GACvB,IACMa,EAAS,GADE,CAAC,kBAAS,2BAAQ,2BAAQ,2BAAQ,gBAE1Cd,SAAQ,SAAAkB,GACfJ,EAAOkB,KAAK,CACVd,KAAAA,EACAe,MAAOtC,IAAAA,OAAAA,QAAoB,IAAK,KAChCM,KAAAA,OAGJ,IAAMiC,EAAQpB,EAAOqB,QAAO,SAACN,EAAGC,GAAJ,OAAUD,EAAIC,EAAEG,QAAO,GACnD,OAAOnB,EAAOJ,KAAI,SAAAC,GAAI,yBAAUA,GAAV,IACpBsB,MAAOG,QAAQzB,EAAKsB,MAAQC,GAAOG,QAAQ,SAmEhCC,CAAiBrC,GAAMS,KAAI,SAAAC,GAAI,yBAAUA,GAAV,IACpCnB,SAAUS,UAGCsC","sources":["pages/visualization/multi-dimension-data-analysis/mock/index.ts"],"sourcesContent":["import Mock from 'mockjs';\nimport dayjs from 'dayjs';\nimport qs from 'query-string';\nimport setupMock from '@/utils/setupMock';\nconst legend = ['活跃用户数', '内容生产量', '内容点击量', '内容曝光量'];\nconst count = [0, 600, 1000, 2000, 4000];\nconst category = ['纯文本', '图文类', '视频类'];\n\nconst getLineData = (name, index) => {\n  const {\n    list\n  } = Mock.mock({\n    'list|10': [{\n      'id|+1': 1,\n      time: function () {\n        return dayjs().subtract(this.id, 'days').format('MM-DD');\n      },\n      count: () => Mock.Random.natural(count[index], count[index + 1]),\n      name: name\n    }]\n  });\n  return list.map(item => {\n    delete item.id;\n    return item;\n  });\n};\n\nconst mockLine = name => {\n  const result = new Array(12).fill(0).map(() => ({\n    y: Mock.Random.natural(1000, 10000)\n  }));\n  return result.sort((a, b) => a.y - b.y).map((item, index) => ({ ...item,\n    x: index,\n    name\n  }));\n};\n\nconst getContentSource = name => {\n  const typeList = ['UGC原创', '国外网站', '转载文章', '行业报告', '其他'];\n  const result = [];\n  typeList.forEach(type => {\n    result.push({\n      type,\n      value: Mock.Random.natural(100, 10000),\n      name\n    });\n  });\n  const total = result.reduce((a, b) => a + b.value, 0);\n  return result.map(item => ({ ...item,\n    value: Number((item.value / total).toFixed(2))\n  }));\n};\n\nsetupMock({\n  setup: () => {\n    Mock.mock(new RegExp('/api/multi-dimension/overview'), () => {\n      const {\n        array: overviewData\n      } = Mock.mock({\n        'array|4': [function () {\n          return Mock.Random.natural(0, 10000);\n        }]\n      });\n      let list = [];\n      legend.forEach((name, index) => list = list.concat(getLineData(name, index)));\n      return {\n        overviewData,\n        chartData: list\n      };\n    });\n    Mock.mock(new RegExp('/api/multi-dimension/activity'), () => {\n      const {\n        list\n      } = Mock.mock({\n        'list|3': [{\n          'name|+1': ['分享量', '评论量', '点赞量'],\n          count: () => Mock.Random.natural(1000, 10000)\n        }]\n      });\n      return list;\n    });\n    Mock.mock(new RegExp('/api/multi-dimension/polar'), () => {\n      const items = ['国际', '娱乐', '体育', '财经', '科技', '其他'];\n\n      const getCategoryCount = () => {\n        const result = {};\n        category.forEach(name => {\n          result[name] = Mock.Random.natural(0, 100);\n        });\n        return result;\n      };\n\n      return {\n        list: items.map(item => ({\n          item,\n          ...getCategoryCount()\n        })),\n        fields: category\n      };\n    });\n    Mock.mock(new RegExp('/api/multi-dimension/card'), params => {\n      const {\n        type\n      } = qs.parseUrl(params.url).query;\n      return Mock.mock({\n        count: () => Mock.Random.natural(1000, 10000),\n        increment: () => Mock.Random.boolean(),\n        diff: () => Mock.Random.natural(100, 1000),\n        chartType: type,\n        chartData: () => {\n          return mockLine('类目1');\n        }\n      });\n    });\n    Mock.mock(new RegExp('/api/multi-dimension/content-source'), () => {\n      const allList = category.map(name => {\n        return getContentSource(name).map(item => ({ ...item,\n          category: name\n        }));\n      });\n      return allList.flat();\n    });\n  }\n});"],"names":["legend","count","category","setupMock","setup","Mock","RegExp","overviewData","array","list","forEach","name","index","concat","time","dayjs","subtract","this","id","format","map","item","getLineData","chartData","result","getCategoryCount","fields","params","type","qs","url","query","increment","diff","chartType","Array","fill","y","sort","a","b","x","push","value","total","reduce","Number","toFixed","getContentSource","flat"],"sourceRoot":""}